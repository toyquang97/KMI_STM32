<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [TESTREALPROJECT\TESTREALPROJECT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image TESTREALPROJECT\TESTREALPROJECT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Mar 08 23:37:14 2023
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Max31855_Read_Temp &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[15]">TIM14_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">TIM15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[17]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1d]">USART1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">USART2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[22]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[86]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[87]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[88]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[89]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[8a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[8c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[66]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>

<P><STRONG><a name="[92]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max31855_Read_Temp
</UL>

<P><STRONG><a name="[93]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max31855_Read_Temp
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max31855_Read_Temp
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max31855_Read_Temp
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[94]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[33]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[65]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>

<P><STRONG><a name="[39]"></a>HAL_ADC_Init</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[3a]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[3d]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>

<P><STRONG><a name="[3e]"></a>HAL_ADC_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>

<P><STRONG><a name="[3f]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendNibble
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>

<P><STRONG><a name="[3c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[57]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max31855_Read_Temp
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendNibble
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendChar
</UL>

<P><STRONG><a name="[37]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[60]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[40]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[42]"></a>HAL_MspInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[44]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[46]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[47]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[49]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 890 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[4a]"></a>HAL_SPI_Init</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[4b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[4c]"></a>HAL_SPI_Receive</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max31855_Read_Temp
</UL>

<P><STRONG><a name="[4d]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[43]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>LCD_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_clear &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_voltage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_unit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_setpoint
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_startup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_settings
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_runtimes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_menu
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_home
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_runtime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_reset_auth
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_comb_setpoint
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_runtime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_reset_auth
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_delay_setting
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asphalt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asph_setpoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_analog
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_alarm
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics3
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics1
</UL>

<P><STRONG><a name="[52]"></a>LCD_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(i.LCD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_init &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_init
</UL>

<P><STRONG><a name="[53]"></a>LCD_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i.LCD_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_puts &rArr; LCD_sendChar &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_voltage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_unit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_setpoint
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_startup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_settings
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_runtimes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_menu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_home
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_runtime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_reset_auth
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_comb_setpoint
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_runtime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_reset_auth
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_delay_setting
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asphalt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asph_setpoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_analog
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_alarm
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics3
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics1
</UL>

<P><STRONG><a name="[55]"></a>LCD_sendByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.LCD_sendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendNibble
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendChar
</UL>

<P><STRONG><a name="[54]"></a>LCD_sendChar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_sendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_sendChar &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
</UL>

<P><STRONG><a name="[51]"></a>LCD_sendCmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(i.LCD_sendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>

<P><STRONG><a name="[56]"></a>LCD_sendNibble</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lcd.o(i.LCD_sendNibble))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendByte
</UL>

<P><STRONG><a name="[58]"></a>LCD_setCursor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.LCD_setCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_voltage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_unit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_setpoint
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_startup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_settings
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_runtimes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_menu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_home
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_runtime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_reset_auth
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_comb_setpoint
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_runtime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_reset_auth
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_delay_setting
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asphalt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asph_setpoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_analog
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_alarm
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics3
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics1
</UL>

<P><STRONG><a name="[5c]"></a>Max31855_Read_Temp</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, max31855.o(i.Max31855_Read_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Max31855_Read_Temp &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SystemClock_Config</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>__0sprintf$1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[97]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[83]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_voltage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_unit
</UL>

<P><STRONG><a name="[32]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[48]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[68]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kmi_display.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[99]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[64]"></a>analogRead</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, adc.o(i.analogRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = analogRead &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>kmi_change_display</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_change_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = kmi_change_display &rArr; kmi_display_voltage &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_voltage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_unit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp_setpoint
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_temp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_startup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_settings
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_runtimes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_menu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_home
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_runtime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_cp_reset_auth
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_comb_setpoint
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_runtime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_reset_auth
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner_delay_setting
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_burner
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asphalt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_asph_setpoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_analog
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_alarm
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics3
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_IOdiagnostics1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>kmi_display_IOdiagnostics1</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_IOdiagnostics1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_IOdiagnostics1 &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[6f]"></a>kmi_display_IOdiagnostics2</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_IOdiagnostics2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_IOdiagnostics2 &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[70]"></a>kmi_display_IOdiagnostics3</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_IOdiagnostics3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_IOdiagnostics3 &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[71]"></a>kmi_display_IOdiagnostics4</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_IOdiagnostics4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_IOdiagnostics4 &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[6a]"></a>kmi_display_alarm</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_alarm &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[74]"></a>kmi_display_analog</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_analog))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_analog &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[7a]"></a>kmi_display_asph_setpoint</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_asph_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_asph_setpoint &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[75]"></a>kmi_display_asphalt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_asphalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_asphalt &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[76]"></a>kmi_display_burner</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_burner))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_burner &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[7c]"></a>kmi_display_burner_delay_setting</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_burner_delay_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_burner_delay_setting &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[81]"></a>kmi_display_burner_reset_auth</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_burner_reset_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_burner_reset_auth &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[80]"></a>kmi_display_burner_runtime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_burner_runtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_burner_runtime &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[7b]"></a>kmi_display_comb_setpoint</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_comb_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_comb_setpoint &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[7f]"></a>kmi_display_cp_reset_auth</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_cp_reset_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_cp_reset_auth &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[7e]"></a>kmi_display_cp_runtime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_cp_runtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_cp_runtime &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[6b]"></a>kmi_display_home</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_home &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[82]"></a>kmi_display_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_init &rArr; LCD_init &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>kmi_display_menu</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_menu &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[7d]"></a>kmi_display_runtimes</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_runtimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_runtimes &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[6d]"></a>kmi_display_settings</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_settings &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[69]"></a>kmi_display_startup</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_startup &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[77]"></a>kmi_display_temp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_temp &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[79]"></a>kmi_display_temp_setpoint</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kmi_display.o(i.kmi_display_temp_setpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmi_display_temp_setpoint &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[78]"></a>kmi_display_temp_unit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, kmi_display.o(i.kmi_display_temp_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = kmi_display_temp_unit &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[73]"></a>kmi_display_voltage</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, kmi_display.o(i.kmi_display_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = kmi_display_voltage &rArr; LCD_setCursor &rArr; LCD_sendCmd &rArr; LCD_sendByte &rArr; LCD_sendNibble &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setCursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_puts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 222 bytes, Stack size 184 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; Max31855_Read_Temp &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max31855_Read_Temp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_display_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmi_change_display
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[59]"></a>MX_ADC_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>MX_GPIO_Init</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>MX_SPI2_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>ADC_Enable</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_Enable &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[45]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[4e]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32f0xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[4f]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[5f]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[5e]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[63]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
